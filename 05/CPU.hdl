// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

// instruction is in shape: i x x a  c1 c2 c3 c4  c5 c6 d1 d2  d3 j1 j2 j3
// i      : 0 for A-instruction, 1 for C-instruction   instruction[15]
// x      : not used                                   instruction[13..14]
// a      : use Areg if a==0, use inM if a==1          instruction[12]
// c1<->c6: which computation to perform               instruction[6..11]
// d1     : destination is A;                          instruction[5]
// d2     : destination is D;                          instruction[4]
// d3     : destination is M;                          instruction[3]
// j1     : output is < 0;                             instruction[2]
// j2     : output is = 0;                             instruction[1]
// j3     : output is > 0;                             instruction[0]



  // extract which instruction to perform: doA, doC
    Not (in=instruction[15], out=doA);
    Not (in=doA,             out=doC);

  // if d3 == 1 and doC == 1 write to memory
    And (a=instruction[3], b=doC, out=writeM);

  // decide what to load to A
    And   (a=instruction[5], b=doC,    out=ALUtoA);
    Mux16 (a=instruction,    b=outALU, out=inA,    sel=ALUtoA);
    
  // load the A and send the output to addressM
    Or (a=doA, b=ALUtoA, out=loadA);
    ARegister (in=inA, load=loadA, out=outA, out[0..14]=addressM);
    
  // load outALU to D if d2==1 & doC==1
    And (a=instruction[4], b=doC, out=loadD);
    DRegister (in=outALU, load=loadD, out=outD);
    
  // select A if a-bit == 0, select inM if a-bit == 1 for input to ALU
    Mux16 (a=outA, b=inM, out=AmuxM, sel=instruction[12]);

        
//ALU
    ALU (x=outD, y=AmuxM,
         zx=instruction[11], nx=instruction[10],
         zy=instruction[9],  ny=instruction[8],
         f=instruction[7],   no=instruction[6],
         out=outALU, out=outM, zr=zr, ng=ng);
        
//PROGRAM COUNTER
  // if zr == 0 && ng == 0, then the result is positive (ps == 1)
    Or (a=zr, b=ng, out=zrORng);
    Not(in=zrORng, out=ps);
    
  // identify which jump to perform
    And (a=instruction[0], b=ps, out=JGT);
    And (a=instruction[1], b=zr, out=JEQ);
    And (a=instruction[2], b=ng, out=JLT);
    
  // jump only if JGT or JEQ or JLT (=JMP)
    Or (a=JGT, b=JEQ, out=tmp);
    Or (a=tmp, b=JLT, out=JMP);
    
  // jump only if JMP && doC
    And (a=JMP, b=doC, out=loadPC);
    
  // if not jump then increment
    Not (in=loadPC, out=incPC);
    
  // add a counter unit
    PC(in=outA, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
}
