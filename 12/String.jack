// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int sLen, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLen = 1;
        }
        else {
            let maxLen = maxLength;
        }
        let str = Array.new(maxLen);
        let sLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return sLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (sLen < maxLen) {
            let str[sLen] = c;
            let sLen = sLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (sLen > 0) {
            let sLen = sLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, value;
        var boolean negSign;
        if ( (sLen > 0) & str[0] = 45 ) {
            let negSign = true;
            let i = 1;
        }
        else {
            let negSign = false;
        }
        while ( (i < sLen) & String.isCharDigit(str[i])) {
            let value = (value * 10) + String.charToInt(str[i]);
            let i = i + 1;
        }
        if (negSign) {
            return -value;
        }
        else {
            return value;
        }
    }

    /** Returns true if the given char is a digit, returns false otherwise. */
    function boolean isCharDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** Returns the int value of a character.
     *  The given character must be a representable integer. */
    function int charToInt(char c) {
        return c - 48;
    }

    /** Returns a character value of an integer. */
    function int intToChar(int i) {
        return i + 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let sLen = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do appendPosInt(val);
        return;
    }

    /** Appends the representation of the given positive value to this string. */
    method void appendPosInt(int val) {
        var int quotient, last;
        var char c;
        let quotient = val/10;
        let last = val - (quotient*10);
        let c = String.intToChar(last);
        if (val < 10) {
            do appendChar(c);
        }
        else {
            do appendPosInt(quotient);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
